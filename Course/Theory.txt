------------------------------SOLID PRINCIPLES------------------------------

1) Single Responsibility Principle - Here each class should have one Responsibility and
   they should not be do multiple things. So seperation of tasks to different classes
   is necessary.

2) Open Closed Principle - It means code should be open for exentsion but closed for the
   modification. So one must use interfaces etc. so that any new functionality can just
   implement it instead of modifying already existing code.

3) Liksov Substitution Principle - Whenever we extend a class and use some functionality
   which expects base class, we can pass the subclass but sometimes it will cause bug.
   So to best use it one must create Factory pattern so that subclass does not change 
   the behaviour of some functionality method.

4) Interface Segregation Principle - If there is an interface with multiple methods, 
   sometimes a class requires only few of the methods and implementing all is pointless.
   Instead we should create another interface with only some part of original interface.

5) Dependency Inversion Principle  - High level module should not depend on low level
   module. Instean they should depend on abstraction (interface). If small change made
   in low level it will cause problems on high level module whereas if dependent on the
   interface one can ensure that it will give the desired result back.

########################################################################################
#                                                                                      #
#                                                                                      #
#                                  CREATIONAL PATTERN                                  #
#                                                                                      #
#                                                                                      #
########################################################################################

------------------------------BUILDER PATTERN------------------------------

1) Whenever we have multiple fields, do not create multiple constructor as it 
   causes confusion. Instead use builder by returning the a builder class so that
   other methods can be invoked in chain.
2) Chaining builder is good but it creates problem in inheritance as BaseBuilder method
   return BaseBuilder so one cannot invoke method of ChildBuilder
3) Use Generics like PersonBuilder<SELF extends PersonBuilder<SELF>> and return like the
   method  protected SELF self() {
        return (SELF) this;
   } Now the child class can override the self method and return its own class like 
   EmployeeBuilder (EmployeeBuilder extends PersonBuilder<EmployeeBuilder>)
4) Flacet Builder - In case of multiple fields we can divide builder into sub builders 
   as an inner class.


------------------------------FACTORY PATTERN------------------------------

1) Sometimes creating multiple constructor is not feasible so instead create static 
   classes which can take same arguments with different meaningfull name and can
   be called directly.
   

------------------------------PROTOTYPE PATTERN------------------------------

1) Basically a copy constructor stuff. We can send object in constructor which will
   help in making a deep copy.
2) We can also override clone() method of object class but class must implement marker
   interface called Cloneable
3) Serialization library provides direct and easy method but need to import it.
   

------------------------------SINGLETON PATTERN------------------------------

1) Only one instance available to use by making constructor private.
2) It can be broken by using Serialization-Deserialization as it creates new object 
   even though constructor was private. To overcome this edge case use: 
   protected Object readResolve() {
      return INSTANCE;
   }
   So after deserialization, Java checks if a method called readResolve() exists. 
   If it does, Java replaces the newly created object with the one returned from 
   readResolve().

########################################################################################
#                                                                                      #
#                                                                                      #
#                                  STRUCTURAL PATTERN                                  #
#                                                                                      #
#                                                                                      #
########################################################################################

   
------------------------------Adapter PATTERN------------------------------

1) Adapter pattern acts as a bridge between two non-compatible interfaces. It implements
   the interface and passes non compatible interface in the constructor to connect
   both the interfaces


------------------------------BRIDGE PATTERN------------------------------

1) It is used when there is a cartesian problem for example 2 classes interdependent on
   3 classes causing one to make 2*3 = 6 classes.
2) To overcome this we can create common interfaces and connect both sets. So that any
   class implementing the interface automatically have same structure and methods.


------------------------------COMPOSITE PATTERN------------------------------

1) Sometimes one object depends/uses other object or whole list of objects depend/uses
   other objects via inheritance/compositon.
2) We can use Iterable<T> interface as it allows single element object act as a 
   collection by returning a single-element collection containing only this.


------------------------------DECORATOR PATTERN------------------------------

1) Sometimes for adding new functionality we can create a new class/decorator which
   takes old object into its constructor and perform additional work
2) If we also want to pass decorator inside a decorator we can pass the common
   interface in constructor instead. So original object should follow that interace
   too.


------------------------------FLYWEIGHT PATTERN------------------------------

1) Whenever we have repeated data we can store it once and use pointer to it for repeated
   requests.
2) For example name can be same so we can store them in cache area and then use pointer to
   it so no further memory is wasted.


------------------------------PROXY PATTERN------------------------------

1) A proxy is just class with extended underlying operations like caching, logging etc.
2) We can create proxy by inheritance or can use composition. 
3) See example DynamicProxy.java (-------------Imp-------------);

########################################################################################
#                                                                                      #
#                                                                                      #
#                                 BEHAVIOURAL PATTERN                                  #
#                                                                                      #
#                                                                                      #
########################################################################################


------------------------------COMMAND PATTERN------------------------------

1) We can store all the operations in a seperate object. By creating an command interface
   which has execute() method wiht perform certain action. 
2) It is useful in undo/redo operations and when decoupling of object with instruction
   is required.


------------------------------MEDIATOR PATTERN------------------------------

1) If there is alot of talk between classes we can create a mediator which connects all
   the components instead of letting them dependent on each other directly. It makes It
   easier to send messages to all.
2) Some use cases are Event broker where multiple components subscribe to something to 
   get messages and other use case is chat room etc.


------------------------------MEMENTO PATTERN------------------------------

1) Mementos are used to roll back states. It is simply a token class with no setters or 
   we can say read only class where stores states.
2) It can be used to restore previous state by passing Memento into desired class as we
   say it act as undo/redo.


------------------------------OBSERVER PATTERN------------------------------

1) It act as a class which is like an Event where other objects can subscribe to it and
   notify using the publish/fire method which will be givent to all other subscribed
   objects of that Event.
2) It can be divided into 2 parts. Observer and Observable. Ex: Chat Room