------------------------------SOLID PRINCIPLES------------------------------

1) Single Responsibility Principle - Here each class should have one Responsibility and
   they should not be do multiple things. So seperation of tasks to different classes
   is necessary.

2) Open Closed Principle - It means code should be open for exentsion but closed for the
   modification. So one must use interfaces etc. so that any new functionality can just
   implement it instead of modifying already existing code.

3) Liksov Substitution Principle - Whenever we extend a class and use some functionality
   which expects base class, we can pass the subclass but sometimes it will cause bug.
   So to best use it one must create Factory pattern so that subclass does not change 
   the behaviour of some functionality method.

4) Interface Segregation Principle - If there is an interface with multiple methods, 
   sometimes a class requires only few of the methods and implementing all is pointless.
   Instead we should create another interface with only some part of original interface.

5) Dependency Inversion Principle  - High level module should not depend on low level
   module. Instean they should depend on abstraction (interface). If small change made
   in low level it will cause problems on high level module whereas if dependent on the
   interface one can ensure that it will give the desired result back.


------------------------------BUILDER PATTERN------------------------------

1) Whenever we have multiple fields, do not create multiple constructor as it 
   causes confusion. Instead use builder by returning the a builder class so that
   other methods can be invoked in chain.
2) Chaining builder is good but it creates problem in inheritance as BaseBuilder method
   return BaseBuilder so one cannot invoke method of ChildBuilder
3) Use Generics like PersonBuilder<SELF extends PersonBuilder<SELF>> and return like the
   method  protected SELF self() {
        return (SELF) this;
   } Now the child class can override the self method and return its own class like 
   EmployeeBuilder (EmployeeBuilder extends PersonBuilder<EmployeeBuilder>)
4) Flacet Builder - In case of multiple fields we can divide builder into sub builders 
   as an inner class.


------------------------------FACTORY PATTERN------------------------------

1) Sometimes creating multiple constructor is not feasible so instead create static 
   classes which can take same arguments with different meaningfull name and can
   be called directly.
   

------------------------------PROTOTYPE PATTERN------------------------------

1) Basically a copy constructor stuff. We can send object in constructor which will
   help in making a deep copy.
2) We can also override clone() method of object class but class must implement marker
   interface called Cloneable
3) Serialization library provides direct and easy method but need to import it.
