Bridge

1) It is used when there is a cartesian problem for example 2 classes interdependent on
   3 classes causing one to make 2*3 = 6 classes.
2) To overcome this we can create common interfaces and connect both sets. So that any
   class implementing the interface automatically have same structure and methods.

Composite

1) Sometimes one object depends/uses other object or whole list of objects depend/uses
   other objects via inheritance/compositon.
2) We can use Iterable<T> interface as it allows single element object act as a 
   collection by returning a single-element collection containing only this.

Decorator

1) Sometimes for adding new functionality we can create a new class/decorator which
   takes old object into its constructor and perform additional work
2) If we also want to pass decorator inside a decorator we can pass the common
   interface in constructor instead. So original object should follow that interace
   too.